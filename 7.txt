http://localhost:8080/

javax.servlet ==> interface and classes that will be used by the servlet and the web container

javax.servlet.http ==> interface and classes to handle http request

Create the servlet ===> Create any normal java class

But convert this java class into servlet class, there are 3 ways to do it:

1. implement Servlet interface ===> defines the main life-cycle method of servlet

2. extend abstract GenericServlet class  ===> any service method is abstract method

3. extend HttpServlet class

Servlet interface ===> GenericServlet ===> HttpServlet ===> Your Servlet

Normally we will use the HttpServlet class to create the servlet, major reason is the protocol http that is used to send the request and response, this class HttpServlet has the method for different Http request

eg. get ====> doGet
	post ====> doPost 

---------------------------------------------------------
Life Cycle of the Servlet
1. Load servlet class ===> load the class file in the web container
2. Create servlet instance ===> web container will create the instance/object of the servlet class, only one object of the servlet will be created.
3. Call the init(-) method ===> web container will call the init(-) method defined in the servlet, this method is called only once.
4. Call the service(-,-) ===> web container will call this method only when someone request for the servlet. This method will be called for every request on the servlet. The main business logic will created in this method as this method handles the request and generate the response that will be send back.
5. Call the destroy() ===> web container will call this when the instance/object of the servlet class is removed or destroyed.

---------------------------------------------------------

To identify any class as the servlet we can use the following techniques:
1. Using annotation
2. Using deployment descriptor (web.xml)

--------------------------------------------------
RequestDispatcher is an interface used to send the request to another resource (servlet, HTML file, JSP file)

This interface is used 
1. to forward a request to the resource (request of the current servlet is sent/forwarded to the resourcec and response is generated by the forwarded resource)

2. to include the resource in the response (response of the resource file will added in the current servlet response, actual response will go from the current servlet). implemented using include() method 

------------------------------------------------------
ServletConfig is an interface whose instance is created by the web container for each servlet. For each servlet, one ServletConfig object is created which is passed to the init() method by the web container.

This object contains initial parameters passed by the web container to the servlet during initailization (calling init())

Scope of this parameter is constrainted to the single servlet.

ServletConfig parameter can be created using:
1. @WebInitParam annotation over the servlet class
2. <init-param> tag inside the <servlet> tag of web.xml file

-------------------------------------------------------
Scope of the data in the servlet
1. ServletConfig: accessible only in single servlet
2. HttpServletRequest: send the request of one servlet to another servlet using RequestDispatcher
3. HttpSession
4. ServletContext: accessible to the entire application

----------------------------------------------------
ServletContext is an interface whose instance is created only once for the entire application. This instance is accessible to all the servlets, JSP files.

ServletContext parameters can be created using:
1. <context-param> tag of the web.xml
2. setAttribute() method in servlet file 

--------------------------------------------------
Session Management

Session is time period/interval.

Session Management is the way to maintain the state of the user.

HTTP Protocol is stateless protocol wherein the server will not remember anything that the user send once the response has been sent back. Everytime user requests to the server, server will treat the request as a new request. So there is a need to maintain the state of the user so that server can identify the request from the same user.

Four ways to implement session management:
1. HttpSession object
2. Cookies
3. Hidden Form Field
4. URL Rewriting

--------------------------------------------------
HttpSession

HttpSession is an interface used to manage session for each user. Web container will create a session id for each user. Here the session data is maintained in the server.

HttpSession object can created/referred using:

1. getSession(): Return current session associated with this user or if the request does not have a session, create new session.

2. getSession(boolean create):
	- create -> true: Always create a new session.

	- create -> false: Return current session associated with this user or if the request does not have a session, new session will not be created and will return null.

If we want to destroy the session object, we use the invalidate() method.

---------------------------------------------------
Cookies

Cookie is file stored in the client machine. This file is send along with the response from the server. Now everytime the request is send to the server, all the cookies from the client machine will go to the server along with the request. Cookies are stored in the cache of the browser.

Cookies can be implemented using Cookie class and create the instance of this class.

1. This cookie instance will be added in the response of the servlet using addCookie(Cookie) of the response object.
2. All the cookies from the client will be received by the server using getCookies() of the request object. This method will return Cookie array.

----------------------------------------------------
Hidden Form Field

A hidden text field which can be used to maintain the user state.

<input type="hidden" name="">

It technique will be used in the scenario where the cookies is disabled in the client's machine.

The request can be send as get or post.

----------------------------------------------------
URL Rewriting

We will send the data from client to the server in name=value pair form. If more data is to be send we can use & to separate. It will be send in the hyperlink and no extra form submission is requested.

This technique is also used when the cookies are disabled in the client's machine.

One problem with URL rewriting is that we can send only get request, post request is not possible

----------------------------------------------------
JSP(Java Server Pages)
Combination of HTML and Java Code is the JSP file. Here we will create the .jsp file which will have HTML code as well as Java code.

Difference Servlet vs JSP

Servlet						
1. Java Code					
2. Writing code is harder as here HTML code is written with java functions.
3. For every request service() is called, hence we have to override the service()
4. Mostly used for business logic/controller (move from page to another)
5. Implementation is faster
6. Every time we make any changes in the servlet code, we have to recompile and redeploy the compiled

JSP
1. HTML based Code
2. Writing code is easier as here Java code is written with HTML tags.
3. For every request _jspService() is called, henc we will override this method
4. Mostly used to create presentation (final response)
5. Implementation is slower because jsp page is first converted into servlet
6. In JSP if the page is modified we don't recompile and redeploy the project.

--------------------------------------------
Lifecycle of JSP
1. Create JSP file (.jsp)

Translation Phase
2. JSP file will be translated into servlet file
	.jsp ----> .java

Compilation Phase
3. Servlet file will be compiled into class file
	.java ----> .class

Execution Phase
4. Load the class file in web container
5. Web container will create the instance of this servlet class file. Only one instance
6. Web container will call jspInit() method. This method is called only once for that instance.
7. Web container will call _jspService() method for every request on this jsp page.
8. Web container will call jspDestroy() method when the instance of this class is removed from the container. This method is called only once for that instance

--------------------------------------------------------
Java Code can be written inside the JSP page using scripting elements.

Three types of the scripting elements:
1. Scriptlet tag
2. Expression tag
3. Declarative tag

-------------------------------------------------------
Scriptlet tag
Any java code within the JSP page. This code will be added in _jspService() method when translated.

Syntax:
<% java code %>

-------------------------------------------------------
Expression tag
The code placed inside the Expression tag is written to the output stream of the response. So you need not write, out.write()/out.print()/out.println(). Its mostly used to print the value of the variable or the value returned by the method. This tag code is also added in _jspService() method

Syntax:
<%= statement %>

-------------------------------------------------------
Declarative Tag

Used to declare the variables and method. The code written inside the declarative tag is placed outside the _jspService() method of the auto generated servlet class.

Syntax:
<%! variable or method declaration %>

It can also be used to override the jspInit() & jspDestroy() methods

------------------------------------------------------
Comments in JSP

1. HTML Comments: 
Translated into _jspService() method in the out.write() method. Only this comment will be part of the final response send to the client.

Syntax:
<!-- comment -->

2. JSP Comments:
This comment is not translated into the generated servlet class. This comment will exist only in the JSP, not in .java file

Syntax:
<%-- --%>

3. Java Comments:
This commant will be placed directly in _jspService. This comment is not added in the final response, will just exist in the servlet file

Syntax:
<% //comment %>
<%/*
comment
*/%>

--------------------------------------------------------
Directives

Used to tell the web container how to translate the JSP page into the corresponding servlet.

Syntax:
<%@directive attribute="value"%>

In the directive we can specify as page, include or taglib
Each directive has multiple pre-defined attributes to which we need to assign the value 

---------------------------------------------------------
JSP page directive

Define some attribute that will define the translation of the entire JSP page

<%@page .....%>

language ==> programming language used to create the servlet, it has only value ie. java

contentType ==> define the type of the http response.

pageEncoding ==> define the encoding techinque using which the response been sent is encoded

import ==> define the classes or interfaces or the entire package been used in the jsp page

extends ==> define the parent class that the generated servlet will inherit from.

session ==>

errorPage ==>

isErrorPage ==>

-------------------------------------------------------
JSP include directive

Used to include the content of any resource (JSP, HTML, text) at the page translation time. It can be used to include the common layout file. We usedit only when static file is to be included, but if we want make any change at runtime in the included file we will use the action elements

<%@include file="resourceName" %>

JSP taglib directive

--------------------------------------------------------
Implicit Objects

There are 9 implicit objects created by web container that are available to all the jsp pages

out				JspWriter
request			HttpServletRequest
response		HttpServletResponse
config			ServletConfig
application	ServletContext
session			HttpSession
pageContext	PageContext
page			Object
exception		Throwable

--------------------------------------------------------
Implicit object config

This object is used to get initialization parameter for the JSP page. It will get the parameters from web.xml file

We will need to first include web.xml file in the project. 

Right-click ==> Java EE Tools ==> Generate web.xml

-------------------------------------------------------
Implicit object application 

This object is created only once for the entire application. Used to set some parameter for the entire application. This parameter is accessible to all the pages of the application.

---------------------------------------------------------
Action Elements

jsp:forward
jsp:include

--------------------------------------------------------
MVC(Model-View-Controller) Architecture/Design Pattern

Used to separate the business logic, presentation logic and data.

Model ---> Application Data. Will also contain the business logic.
View ---> Presentation (using JSP files)
Controller ---> Interface between model and view. Intercept the incoming request. (Using servlets/JSP)

