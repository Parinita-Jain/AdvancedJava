http://localhost:8080/

javax.servlet ==> interface and classes that will be used by the servlet and the web container

javax.servlet.http ==> interface and classes to handle http request

Create the servlet ===> Create any normal java class

But convert this java class into servlet class, there are 3 ways to do it:

1. implement Servlet interface ===> defines the main life-cycle method of servlet

2. extend abstract GenericServlet class  ===> any service method is abstract method

3. extend HttpServlet class

Servlet interface ===> GenericServlet ===> HttpServlet ===> Your Servlet

Normally we will use the HttpServlet class to create the servlet, major reason is the protocol http that is used to send the request and response, this class HttpServlet has the method for different Http request

eg. get ====> doGet
	post ====> doPost 

---------------------------------------------------------
Life Cycle of the Servlet
1. Load servlet class ===> load the class file in the web container
2. Create servlet instance ===> web container will create the instance/object of the servlet class, only one object of the servlet will be created.
3. Call the init(-) method ===> web container will call the init(-) method defined in the servlet, this method is called only once.
4. Call the service(-,-) ===> web container will call this method only when someone request for the servlet. This method will be called for every request on the servlet. The main business logic will created in this method as this method handles the request and generate the response that will be send back.
5. Call the destroy() ===> web container will call this when the instance/object of the servlet class is removed or destroyed.

---------------------------------------------------------

To identify any class as the servlet we can use the following techniques:
1. Using annotation
2. Using deployment descriptor (web.xml)

--------------------------------------------------
RequestDispatcher is an interface used to send the request to another resource (servlet, HTML file, JSP file)

This interface is used 
1. to forward a request to the resource (request of the current servlet is sent/forwarded to the resourcec and response is generated by the forwarded resource)

2. to include the resource in the response (response of the resource file will added in the current servlet response, actual response will go from the current servlet). implemented using include() method 

------------------------------------------------------
ServletConfig is an interface whose instance is created by the web container for each servlet. For each servlet, one ServletConfig object is created which is passed to the init() method by the web container.

This object contains initial parameters passed by the web container to the servlet during initailization (calling init())

Scope of this parameter is constrainted to the single servlet.

ServletConfig parameter can be created using:
1. @WebInitParam annotation over the servlet class
2. <init-param> tag inside the <servlet> tag of web.xml file

-------------------------------------------------------
Scope of the data in the servlet
1. ServletConfig: accessible only in single servlet
2. HttpServletRequest: send the request of one servlet to another servlet using RequestDispatcher
3. HttpSession
4. ServletContext: accessible to the entire application

----------------------------------------------------
ServletContext is an interface whose instance is created only once for the entire application. This instance is accessible to all the servlets, JSP files.

ServletContext parameters can be created using:
1. <context-param> tag of the web.xml
2. setAttribute() method in servlet file 

--------------------------------------------------
Session Management

Session is time period/interval.

Session Management is the way to maintain the state of the user.

HTTP Protocol is stateless protocol wherein the server will not remember anything that the user send once the response has been sent back. Everytime user requests to the server, server will treat the request as a new request. So there is a need to maintain the state of the user so that server can identify the request from the same user.

Four ways to implement session management:
1. HttpSession object
2. Cookies
3. Hidden Form Field
4. URL Rewriting

--------------------------------------------------
HttpSession

HttpSession is an interface used to manage session for each user. Web container will create a session id for each user. Here the session data is maintained in the server.

HttpSession object can created/referred using:

1. getSession(): Return current session associated with this user or if the request does not have a session, create new session.

2. getSession(boolean create):
	- create -> true: Always create a new session.

	- create -> false: Return current session associated with this user or if the request does not have a session, new session will not be created and will return null.

If we want to destroy the session object, we use the invalidate() method.

---------------------------------------------------
Cookies

Cookie is file stored in the client machine. This file is send along with the response from the server. Now everytime the request is send to the server, all the cookies from the client machine will go to the server along with the request. Cookies are stored in the cache of the browser.

Cookies can be implemented using Cookie class and create the instance of this class.

1. This cookie instance will be added in the response of the servlet using addCookie(Cookie) of the response object.
2. All the cookies from the client will be received by the server using getCookies() of the request object. This method will return Cookie array.






